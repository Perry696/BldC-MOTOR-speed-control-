function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 04-May-2025 18:48:25.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx3 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx3 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [2 3];
x1_step2.xoffset = [300.430477195232;0.16452010740943];
x1_step2.gain = [0.0100298386346678;0.0100298386346678];
x1_step2.ymin = -1;

% Layer 1
b1 = [5.4629973492638264077;3.5986726902999572886;2.2299291553588886927;1.0319639120195855941;0.46982260468351561;0.49277790076439653699;-1.6067923819507712313;2.12322372563202455;3.6731695723597921344;3.949890893787382673];
IW1_1 = [-3.7177382609227835886 0.93395458337876646748;-1.8012939860910635037 3.732723357175383061;-3.7685546368800979522 -2.4287468002043994808;-3.0944562320255690757 2.4190681286737554245;-1.2418367552610094506 -4.2265484273501856549;0.77926181438556763048 4.2845435198530950061;-0.65939077421737213314 4.0411052996138767668;2.7638015513112410559 -3.2019179841821689969;0.26960310953225535835 -4.3597975797243444518;3.0797201567953824686 -1.6589661212225259579];

% Layer 2
b2 = [-0.55078281610207535657;-0.39483567728372437333;-0.89198483764325064982];
LW2_1 = [0.41830977848331463154 0.090724614115736720854 0.2256597770390962876 -0.37291618705484075313 0.27661111188850862064 0.89814760519704106567 -0.087475206636698943363 -0.27516836407225253591 -0.5190133015482065737 0.28865798437333489712;0.78719250768025250675 0.10333042506920751824 -0.33592575375958927397 -0.47047189045974313615 0.63483616676639686993 1.1403665438954782019 0.8476501727692371535 0.36837205092581942756 -0.085453155903957203621 -0.10254122163697564074;0.15990501733295811593 0.10743985826615952417 0.85166405022092805943 -0.14371130217126415474 0.014894699760974666053 0.43504889812963803974 0.23211577166595198651 0.10428286589907931337 -0.69344392314099856378 0.49867409000735118951];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.858249948732286;1.69420886016169;8.68098891603328];
y1_step1.xoffset = [1.34106649487199;0.413135492603759;0.0850868589303182];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    X{1,ts} = X{1,ts}';
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);

    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);

    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;

    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
